
  model{
    for (i in 1:n){
      #y[i] ~ dbern(y.hat[i])
      y[i] ~ dbin(y.hat[i], N_trials[i])
      y.hat[i] <- max(0, min(1, P[i]))
      
      # probability of responding change
      P[i] <- ifelse(CHANGE[i] == 1,
                     a[i]*(d[i] + (1 - d[i])*lambda[i]) + (1 - a[i])*u[i], # p(hit)
                     ifelse(d[i] == 1, (1 - a[i])*u[i], a[i]*lambda[i] + (1 - a[i])*u[i]))# p(false-alarm)
      
      # mixture of guessing types
      lambda[i] <- (P_og[i]*g_o[i] + (1 - P_og[i])*g_i[i])
      
      # optimal guessing
      g_o[i] <- ifelse(g_i[i] == 0.5, 0.5, ifelse(g_i[i] > 0.5, 1, 0))
      
      # informed guessing
      g_i[i] <- ((1 - d[i])*u[i])/ ((1 - d[i])*u[i] + (1 - u[i]))
      
      ## log factorial method for implementing choose function
      d[i] <- ifelse(k[i] >= N[i] - C[i] + 1, 1, 1 - exp(logfact(N[i] - k[i]) - (logfact(C[i]) + logfact(N[i] - k[i] - C[i]))) / exp(logfact(N[i]) - (logfact(C[i]) + logfact(N[i] - C[i]))))
      
      # model transformations of k, u, and a
      k[i] <- max(kappa[i], 0) # Mass-at-chance transformation
      kappa[i] <- Ksubj[id[i]]
      logit(a[i]) <- Asubj[id[i]]
      logit(u[i]) <- Usubj[B_level[i], id[i]]
      logit(P_og[i]) <- P_og_subj[id[i]]
    }
    # individual level
    for (s in 1:S){
      Ksubj[s] ~ dnorm(K, K_Tau)
      Asubj[s] ~ dnorm(A, A_Tau)
    }
    for (l in 1:B_n){
      for (s in 1:S){
        Usubj[l, s] ~ dnorm(U[l], U_Tau) # levels share variance
      }
    }
    
    # Hierarchical priors
    # grand means
    K ~ dnorm(3, 1/10^2)
    A ~ dnorm(3, 1/10^2)
    for (l in 1:B_n){
      U[l] ~ dnorm(0, 1/10^2)
    }
    
    # standard deviations
    K_Tau <- 1/pow(K_SD, 2)
    K_SD ~ dgamma(1.01005, 0.1005012) # mode = .1, SD = 10 (v. vauge)
    U_Tau <- 1/pow(U_SD, 2)
    U_SD ~ dgamma(1.01005, 0.1005012)
    A_Tau <- 1/pow(A_SD, 2)
    A_SD ~ dgamma(1.01005, 0.1005012)
    
    # mixture parameter
    for (s in 1:S){
      P_og_subj[s] ~ dnorm(POG, POG_Tau)
    }
    
    # priors
    POG ~ dnorm(0, 1/10^2)

    POG_Tau <- 1/pow(POG_SD, 2)
    POG_SD ~ dgamma(1.01005, 0.1005012)
  }
